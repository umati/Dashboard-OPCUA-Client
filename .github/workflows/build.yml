---
name: Build

on: [push, pull_request]

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-20.04, ubuntu-22.04, windows-2019, windows-2022]
        build_type: [Debug, Release]
        arch: ["386", "amd64"]
    runs-on: ${{matrix.os}}
    env:
      CMAKE_INSTALL_PREFIX: ${{ github.workspace }}/install
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3.3.0
        with:
          path: UmatiDashboardOpcUaClient
          submodules: recursive
      - name: Set Windows CMAKE_GENERATOR 2019
        if: matrix.os == 'windows-2019'
        run: |
          #shellcheck  disable=SC2154
          echo "CMAKE_GENERATOR=Visual Studio 16 2019">> $env:GITHUB_ENV
          echo "CMAKE_BUILD_ARGS=--config ${{matrix.build_type}}">> $env:GITHUB_ENV
      - name: Set Windows CMAKE_GENERATOR 2022
        if: matrix.os == 'windows-2022'
        run: |
          #shellcheck  disable=SC2154
          echo "CMAKE_GENERATOR=Visual Studio 17 2022">> "$env:GITHUB_ENV"
          echo "CMAKE_BUILD_ARGS=--config ${{matrix.build_type}}">> $env:GITHUB_ENV
      - name: Build server with dependencies
        if: matrix.arch == 'amd64'
        run: |
          mkdir -p build
          cd build
          cmake ../UmatiDashboardOpcUaClient/.github/ -DCMAKE_INSTALL_PREFIX:PATH=${{ env.CMAKE_INSTALL_PREFIX }} -DCMAKE_BUILD_TYPE=${{matrix.build_type}} -DPAHO_WITH_SSL=1
          cmake --build . ${{env.CMAKE_BUILD_ARGS}}
      - name: Build server with dependencies 32bit
        if: matrix.arch == '386' && matrix.os == 'windows-2022'
        run: |
          mkdir -p build
          cd build
          cmake ../UmatiDashboardOpcUaClient/.github/ -A Win32 -DCMAKE_INSTALL_PREFIX:PATH=${{ env.CMAKE_INSTALL_PREFIX }} -DCMAKE_BUILD_TYPE=${{matrix.build_type}} -DPAHO_WITH_SSL=1
          cmake --build . ${{env.CMAKE_BUILD_ARGS}}
      - name: Upload Artefacts
        uses: actions/upload-artifact@v3
        with:
          name: UmatiDashboardOpcUaClient-${{matrix.build_type}}-${{matrix.os}}-${{matrix.arch}}
          path: |
            ${{ env.CMAKE_INSTALL_PREFIX }}/bin
            ${{ env.CMAKE_INSTALL_PREFIX }}/lib/*.so*
            ${{ env.CMAKE_INSTALL_PREFIX }}/lib64/*.so*
  docker:
    runs-on: ubuntu-20.04
    env:
      # Check if this is not a pull request and GITHUB_TOKEN is set
      # As all env variables are strings, you need to compaire against "== 'true'" (not "== true")
      IS_NOT_PR: ${{ !github.head_ref && true }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3.3.0
        with:
          path: UmatiDashboardOpcUaClient
          submodules: recursive
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2.2.1
      - name: PrepareReg Names
        run: |
          #shellcheck  disable=SC2154
          echo IMAGE_REPOSITORY=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]') >> $GITHUB_ENV
          echo IMAGE_TAG=$(echo ${{ github.ref }} | tr '[:upper:]' '[:lower:]' |  awk '{sub(/([^\/]*\/){2}/,""); gsub(/\/|_/, "-")}1') >> $GITHUB_ENV
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2.1.0
        if: env.IS_NOT_PR == 'true' && ${{ github.actor }} != 'dependabot'
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build Docker Release
        uses: docker/build-push-action@v3.3.1
        with:
          file: "./UmatiDashboardOpcUaClient/Dockerfile"
          context: ./UmatiDashboardOpcUaClient
          platforms: linux/amd64
          push: ${{env.IS_NOT_PR == 'true'}}
          tags: |
            ghcr.io/${{ env.IMAGE_REPOSITORY }}:${{ env.IMAGE_TAG }}
